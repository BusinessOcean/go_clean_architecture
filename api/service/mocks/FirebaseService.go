// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	auth "firebase.google.com/go/auth"
	mock "github.com/stretchr/testify/mock"
)

// FirebaseService is an autogenerated mock type for the FirebaseService type
type FirebaseService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: email, password
func (_m *FirebaseService) CreateUser(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: uid
func (_m *FirebaseService) DeleteUser(uid string) error {
	ret := _m.Called(uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyToken provides a mock function with given fields: idToken
func (_m *FirebaseService) VerifyToken(idToken string) (*auth.Token, error) {
	ret := _m.Called(idToken)

	var r0 *auth.Token
	if rf, ok := ret.Get(0).(func(string) *auth.Token); ok {
		r0 = rf(idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
