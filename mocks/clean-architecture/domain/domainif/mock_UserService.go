// Code generated by mockery v2.40.1. DO NOT EDIT.

package mockdomainif

import (
	domainif "clean-architecture/domain/domainif"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "clean-architecture/domain/models"

	types "clean-architecture/pkg/types"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *MockUserService) Create(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user *models.User
func (_e *MockUserService_Expecter) Create(user interface{}) *MockUserService_Create_Call {
	return &MockUserService_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *MockUserService_Create_Call) Run(run func(user *models.User)) *MockUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockUserService_Create_Call) Return(_a0 error) *MockUserService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Create_Call) RunAndReturn(run func(*models.User) error) *MockUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: uuid
func (_m *MockUserService) DeleteUser(uuid types.BinaryUUID) error {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.BinaryUUID) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - uuid types.BinaryUUID
func (_e *MockUserService_Expecter) DeleteUser(uuid interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", uuid)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(uuid types.BinaryUUID)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.BinaryUUID))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(_a0 error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(types.BinaryUUID) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUser provides a mock function with given fields:
func (_m *MockUserService) GetAllUser() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUser")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetAllUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUser'
type MockUserService_GetAllUser_Call struct {
	*mock.Call
}

// GetAllUser is a helper method to define mock.On call
func (_e *MockUserService_Expecter) GetAllUser() *MockUserService_GetAllUser_Call {
	return &MockUserService_GetAllUser_Call{Call: _e.mock.On("GetAllUser")}
}

func (_c *MockUserService_GetAllUser_Call) Run(run func()) *MockUserService_GetAllUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_GetAllUser_Call) Return(response map[string]interface{}, err error) *MockUserService_GetAllUser_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockUserService_GetAllUser_Call) RunAndReturn(run func() (map[string]interface{}, error)) *MockUserService_GetAllUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneUser provides a mock function with given fields: userID
func (_m *MockUserService) GetOneUser(userID types.BinaryUUID) (models.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(types.BinaryUUID) (models.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(types.BinaryUUID) models.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(types.BinaryUUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetOneUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneUser'
type MockUserService_GetOneUser_Call struct {
	*mock.Call
}

// GetOneUser is a helper method to define mock.On call
//   - userID types.BinaryUUID
func (_e *MockUserService_Expecter) GetOneUser(userID interface{}) *MockUserService_GetOneUser_Call {
	return &MockUserService_GetOneUser_Call{Call: _e.mock.On("GetOneUser", userID)}
}

func (_c *MockUserService_GetOneUser_Call) Run(run func(userID types.BinaryUUID)) *MockUserService_GetOneUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.BinaryUUID))
	})
	return _c
}

func (_c *MockUserService_GetOneUser_Call) Return(user models.User, err error) *MockUserService_GetOneUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetOneUser_Call) RunAndReturn(run func(types.BinaryUUID) (models.User, error)) *MockUserService_GetOneUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetPaginationScope provides a mock function with given fields: scope
func (_m *MockUserService) SetPaginationScope(scope func(*gorm.DB) *gorm.DB) domainif.UserService {
	ret := _m.Called(scope)

	if len(ret) == 0 {
		panic("no return value specified for SetPaginationScope")
	}

	var r0 domainif.UserService
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) *gorm.DB) domainif.UserService); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domainif.UserService)
		}
	}

	return r0
}

// MockUserService_SetPaginationScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPaginationScope'
type MockUserService_SetPaginationScope_Call struct {
	*mock.Call
}

// SetPaginationScope is a helper method to define mock.On call
//   - scope func(*gorm.DB) *gorm.DB
func (_e *MockUserService_Expecter) SetPaginationScope(scope interface{}) *MockUserService_SetPaginationScope_Call {
	return &MockUserService_SetPaginationScope_Call{Call: _e.mock.On("SetPaginationScope", scope)}
}

func (_c *MockUserService_SetPaginationScope_Call) Run(run func(scope func(*gorm.DB) *gorm.DB)) *MockUserService_SetPaginationScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*gorm.DB) *gorm.DB))
	})
	return _c
}

func (_c *MockUserService_SetPaginationScope_Call) Return(_a0 domainif.UserService) *MockUserService_SetPaginationScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_SetPaginationScope_Call) RunAndReturn(run func(func(*gorm.DB) *gorm.DB) domainif.UserService) *MockUserService_SetPaginationScope_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *MockUserService) UpdateUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *models.User
func (_e *MockUserService_Expecter) UpdateUser(user interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(user *models.User)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(_a0 error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(*models.User) error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
